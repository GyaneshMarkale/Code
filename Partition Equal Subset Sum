Given a non-empty array nums containing only positive integers, find if the array can be 
partitioned into two subsets such that the sum of elements in both subsets is equal.

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.


class Solution {
    public boolean canPartition(int[] nums) {
        int n = nums.length;
        int sum = 0;
        for(int i = 0; i < n; i++){
            sum += nums[i];
        }
        
        if (sum % 2 != 0){
            return false;
        }
        
        sum = sum/2;
        
        boolean [][]partition = new boolean[n+1][sum+1];
        for(int i = 0; i <= n; i++){
            partition[i][0] = true;
        }
        
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= sum ; j++){
                if (j - nums[i - 1] >= 0) {
                    partition[i][j] = partition[i - 1][j - nums[i - 1]] || partition[i - 1][j];
                } else {
                    partition[i][j] = partition[i-1][j];
                }
                    
            }
        }
        return partition[n][sum];
    }
}
