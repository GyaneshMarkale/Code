#Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

#A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


#Example 1:
#Input: digits = "23"
#Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

#Example 2:
#Input: digits = ""
#Output: []
#Example 3:

#Input: digits = "2"
#Output: ["a","b","c"]

###Solution###

import java.io.*;
class Solution {
    public List<String> letterCombinations(String digits) {
       List<String> res = new ArrayList<>();
       if (digits.length() == 0)
           return res;
        Map<Character, String> map = new HashMap<Character, String>();
        map.put('2', "abc");
        map.put('3', "def");
        map.put('4', "ghi");
        map.put('5', "jkl");
        map.put('6', "mno");
        map.put('7', "pqrs");
        map.put('8', "tuv");
        map.put('9', "wxyz");
        
        combinationUtil(digits,0, map, new StringBuilder(), res);
        return res;            
    }
    public void combinationUtil(String digits, int i, Map<Character, String> map, StringBuilder sb, List<String> res){
        if (i == digits.length()){
            res.add(sb.toString());
            return;
        }
        
        String curr = map.get(digits.charAt(i));
        for(int j = 0; j < curr.length(); j++){
            sb.append(curr.charAt(j));
            combinationUtil(digits,i + 1, map, sb, res);
            sb.deleteCharAt(sb.length() - 1);
        }
            
    }
}
