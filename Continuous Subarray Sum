Given an integer array nums and an integer k, return true if nums has a continuous subarray of size at least two whose elements sum up to a multiple of k, or false otherwise.

An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.

Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.

Input: nums = [23,2,6,4,7], k = 6
Output: true
Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.
42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.

Input: nums = [23,2,6,4,7], k = 13
Output: false


Solution

class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0,-1);  // intial value in map
        int remainder = 0;
        for(int i = 0; i < nums.length; i++){
            remainder += nums[i];
            if(k != 0)
                remainder %= k;
            if (map.containsKey(remainder) && i - map.get(remainder) > 1) // to check if remanider in map and length of subarray should greater than 1
                return true;
            
            map.put(remainder, map.getOrDefault(remainder,i));
        }
        
        
        return false;
    }
}
